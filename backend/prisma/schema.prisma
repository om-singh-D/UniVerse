// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  passwordHash      String?   @map("password_hash")
  name              String    @db.VarChar(100)
  username          String    @unique @db.VarChar(50)
  profilePicUrl     String?   @map("profile_pic_url") @db.VarChar(500)
  bio               String?
  yearOfStudy       Int?      @map("year_of_study")
  major             String?   @db.VarChar(100)
  
  // SSO fields
  ssoProvider       String?   @map("sso_provider") @db.VarChar(50)
  ssoId             String?   @map("sso_id") @db.VarChar(255)
  
  // Account status
  isVerified        Boolean   @default(false) @map("is_verified")
  isAdmin           Boolean   @default(false) @map("is_admin")
  isActive          Boolean   @default(true) @map("is_active")
  
  // Privacy settings
  profileVisibility String    @default("public") @map("profile_visibility") @db.VarChar(20)
  
  // Timestamps
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  lastLogin         DateTime? @map("last_login")

  // Relations
  sessions          UserSession[]
  confessions       Confession[]
  marketplaceItems  MarketplaceItem[]
  ownedGroups       StudyGroup[] @relation("GroupOwner")
  groupMemberships  GroupMembership[]
  createdEvents     Event[]
  eventRsvps        EventRsvp[]
  notifications     Notification[]
  uploadedFiles     File[]
  comments          Comment[]
  likes             Like[]
  favorites         Favorite[]
  reports           Report[]
  moderatedContent  Confession[] @relation("ModeratedBy")
  reviewedReports   Report[] @relation("ReviewedBy")

  @@map("users")
}

model UserSession {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  tokenHash String   @map("token_hash") @db.VarChar(255)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model ConfessionCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?
  isActive    Boolean  @default(true) @map("is_active")

  confessions Confession[]

  @@map("confession_categories")
}

model Confession {
  id             Int       @id @default(autoincrement())
  userId         Int?      @map("user_id")
  content        String
  categoryId     Int?      @map("category_id")
  
  // Moderation
  isApproved     Boolean   @default(false) @map("is_approved")
  isAnonymous    Boolean   @default(true) @map("is_anonymous")
  isFlagged      Boolean   @default(false) @map("is_flagged")
  moderatedBy    Int?      @map("moderated_by")
  moderatedAt    DateTime? @map("moderated_at")
  
  // Engagement
  likesCount     Int       @default(0) @map("likes_count")
  commentsCount  Int       @default(0) @map("comments_count")
  
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  user      User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  category  ConfessionCategory? @relation(fields: [categoryId], references: [id])
  moderator User?               @relation("ModeratedBy", fields: [moderatedBy], references: [id])
  comments  Comment[]
  likes     Like[]
  reports   Report[]
  notifications Notification[]

  @@map("confessions")
}

// Additional models would continue here...
// Due to length constraints, I'm showing the core models
// The complete schema would include all tables from your SQL schema

@@map("marketplace_categories")
model MarketplaceCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?
  isActive    Boolean  @default(true) @map("is_active")

  items MarketplaceItem[]
}

model MarketplaceItem {
  id              Int       @id @default(autoincrement())
  userId          Int       @map("user_id")
  title           String    @db.VarChar(200)
  description     String?
  price           Decimal   @db.Decimal(10, 2)
  categoryId      Int?      @map("category_id")
  condition       String    @default("good") @db.VarChar(20)
  
  // Status and visibility
  status          String    @default("available") @db.VarChar(20)
  isNegotiable    Boolean   @default(true) @map("is_negotiable")
  
  // Location
  pickupLocation  String?   @map("pickup_location") @db.VarChar(200)
  
  // Engagement
  viewsCount      Int       @default(0) @map("views_count")
  favoritesCount  Int       @default(0) @map("favorites_count")
  
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  category  MarketplaceCategory? @relation(fields: [categoryId], references: [id])
  images    ItemImage[]
  favorites Favorite[]
  comments  Comment[]
  reports   Report[]
  notifications Notification[]

  @@map("marketplace_items")
}
